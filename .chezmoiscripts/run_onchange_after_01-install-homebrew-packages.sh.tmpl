{{ if eq .chezmoi.os "darwin" -}}
#!/bin/bash

set -euo pipefail

# Source shared utilities
if [[ -z "${CHEZMOI_WORKING_TREE}" ]]; then
    echo "Error, \$CHEZMOI_WORKING_TREE must be set. Please only run this script via chezmoi"
    exit 1
fi
source "${CHEZMOI_WORKING_TREE}/lib/shell-utils.sh"


# Setup error handling
setup_simple_error_trap

# Configuration
readonly BREWFILE_HASH="{{ include "Brewfile" | sha256sum }}"
readonly BREWFILE_PATH="$HOME/.local/share/chezmoi/Brewfile"

# Check if Homebrew is available
check_homebrew_available() {
    if ! command -v brew >/dev/null 2>&1; then
        log_error "Homebrew is not installed or not in PATH"
        log_info "Please install Homebrew first: https://brew.sh"
        return 1
    fi

    log_info "Homebrew version: $(brew --version | head -n1)"
    return 0
}

# Check if Brewfile exists
check_brewfile_exists() {
    if [[ ! -f "Brewfile" ]] && [[ ! -f "$BREWFILE_PATH" ]]; then
        log_error "Brewfile not found in current directory or at $BREWFILE_PATH"
        return 1
    fi

    local brewfile_location="Brewfile"
    if [[ ! -f "Brewfile" ]] && [[ -f "$BREWFILE_PATH" ]]; then
        brewfile_location="$BREWFILE_PATH"
    fi

    log_info "Using Brewfile: $brewfile_location"
    return 0
}

# Update Homebrew
update_homebrew() {
    log_info "Updating Homebrew..."

    if brew update >/dev/null 2>&1; then
        log_success "Homebrew updated successfully"
        return 0
    else
        log_warning "Failed to update Homebrew (continuing anyway)"
        return 1
    fi
}

# Show what will be installed/updated
show_installation_plan() {
    echo
    log_title "üìã Analyzing Brewfile dependencies..."

    # Check for outdated packages
    local outdated_count=0
    if brew outdated --quiet 2>/dev/null | grep -q .; then
        outdated_count=$(brew outdated --quiet 2>/dev/null | wc -l | tr -d ' ')
        log_info "üì¶ $outdated_count package(s) can be updated"
    fi

    # Show bundle status
    if brew bundle check 2>/dev/null; then
        log_success "All Brewfile dependencies are satisfied"
    else
        log_title "üì• New packages will be installed from Brewfile"
    fi
    echo
}

# Install packages from Brewfile
install_brewfile_packages() {
    log_title "üç∫ Installing packages from Brewfile..."

    local start_time
    start_time=$(date +%s)

    # Use brew bundle with verbose output for better feedback
    if brew bundle --verbose; then
        local end_time
        end_time=$(date +%s)
        local duration=$((end_time - start_time))

        log_success "Brewfile installation completed in ${duration}s"
        return 0
    else
        log_error "Failed to install packages from Brewfile"
        return 1
    fi
}

# Cleanup unnecessary packages
cleanup_packages() {
    echo
    log_title "üßπ Cleaning up unnecessary packages..."

    # Check for packages to cleanup
    if brew bundle cleanup --dry-run 2>/dev/null | grep -q "Would uninstall"; then
        log_warning "Found packages not in Brewfile that could be removed"
        log_info "Run 'brew bundle cleanup' manually to remove them"
    else
        log_info "No unnecessary packages found"
    fi

    # Clean up cache
    echo
    if brew cleanup >/dev/null 2>&1; then
        log_success "Cache cleaned up successfully"
    else
        log_warning "Failed to clean up cache"
    fi
}

# Show post-installation status
show_installation_status() {
    echo
    log_title "üìä Installation summary:"

    # Count installed packages
    local brew_count
    local cask_count

    brew_count=$(brew list --formula 2>/dev/null | wc -l | tr -d ' ')
    cask_count=$(brew list --cask 2>/dev/null | wc -l | tr -d ' ')

    echo "  üì¶ Formulas installed: $brew_count"
    echo "  üóÉÔ∏è  Casks installed: $cask_count"

    # Check if any packages are outdated
    local outdated_count=0
    if brew outdated --quiet 2>/dev/null | grep -q .; then
        outdated_count=$(brew outdated --quiet 2>/dev/null | wc -l | tr -d ' ')
        echo "  üîÑ Packages needing updates: $outdated_count"
    else
        echo "  ‚úÖ All packages are up to date"
    fi
}

# Main execution
main() {
    show_script_header "üç∫ Homebrew Package Manager - Brewfile hash: ${BREWFILE_HASH:0:8}"

    local failures=0

    # Check prerequisites
    if ! check_homebrew_available; then
        ((failures++))
        return 1
    fi

    if ! check_brewfile_exists; then
        ((failures++))
        return 1
    fi

    # Update Homebrew (non-critical)
    update_homebrew || true

    # Show installation plan
    show_installation_plan

    # Install packages
    if ! install_brewfile_packages; then
        ((failures++))
    fi

    # Cleanup (non-critical)
    cleanup_packages || true

    # Show final status
    show_installation_status

    # Summary
    show_summary $failures \
        "Homebrew package installation completed successfully!" \
        "Homebrew package installation completed with failures"

    show_tips \
        "Use 'brew outdated' to check for package updates" \
        "Use 'brew bundle cleanup' to remove unlisted packages" \
        "Use 'brew bundle check' to verify Brewfile satisfaction" \
        "Use 'brew doctor' to check for issues"

    # Exit with error code if any critical operations failed
    if [[ $failures -gt 0 ]]; then
        exit 1
    fi
}

# Run main function
main "$@"

{{ end -}}