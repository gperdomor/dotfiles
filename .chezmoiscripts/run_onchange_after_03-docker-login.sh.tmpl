#!/bin/bash

set -euo pipefail

# Source shared utilities
if [[ -z "${CHEZMOI_WORKING_TREE}" ]]; then
    echo "Error, \$CHEZMOI_WORKING_TREE must be set. Please only run this script via chezmoi"
    exit 1
fi
source "${CHEZMOI_WORKING_TREE}/lib/shell-utils.sh"

# Setup error handling
setup_simple_error_trap

# Safe Docker login function
docker_login() {
    local registry="$1"
    local username="$2"
    local password="$3"
    local registry_name="$4"

    log_info "Logging into $registry_name..."

    # Use process substitution to avoid password in command history
    if echo "$password" | docker login ${registry:+"$registry"} -u "$username" --password-stdin >/dev/null 2>&1; then
        log_success "Successfully logged into $registry_name"
        return 0
    else
        log_error "Failed to login to $registry_name"
        return 1
    fi
}

check_docker_auth() {
    local registry="$1"
    local registry_name="$2"
    local config_file="$HOME/.docker/config.json"

    # Check if config file exists
    if [[ ! -f "$config_file" ]]; then
        echo "  ‚ùå $registry_name: No Docker config file found"
        return 1
    fi

    # For DockerHub, check multiple possible auth entries
    if [[ "$registry" == "dockerhub" ]]; then
        if jq -e '.auths["https://index.docker.io/v1/"] // .auths["docker.io"] // .auths["index.docker.io"]' "$config_file" >/dev/null 2>&1; then
            echo "  ‚úÖ $registry_name: Authenticated"
            return 0
        else
            echo "  ‚ùå $registry_name: Not authenticated"
            return 1
        fi
    else
        # For other registries, check the specific registry URL
        if jq -e ".auths[\"$registry\"] // .auths[\"https://$registry\"]" "$config_file" >/dev/null 2>&1; then
            echo "  ‚úÖ $registry_name: Authenticated"
            return 0
        else
            echo "  ‚ùå $registry_name: Not authenticated"
            return 1
        fi
    fi
}

# Main execution
main() {
    show_script_header "üê≥ Configuring Docker registry authentication..."

    local login_failures=0

    # DockerHub login
    log_title "üì¶ Authenticating with DockerHub..."
    if ! docker_login "" \
        "{{ onepasswordRead "op://op3k53txtuxsdn3ajfejlejos4/qp3chp4oubentia6febw4m4wfi/username" "Y6TIYA2XHNHYJBR5E2BJXPSH4M" }}" \
        "{{ onepasswordRead "op://op3k53txtuxsdn3ajfejlejos4/b7gcbrwyxzni5dt3wb5e75sf5y/password" "Y6TIYA2XHNHYJBR5E2BJXPSH4M" }}" \
        "DockerHub"; then
        ((login_failures++))
    fi

{{ if .isWorkComputer -}}
    # GitLab Registry login (work computer only)
    echo
    log_title "ü¶ä Authenticating with GitLab Registry..."
    if ! docker_login "registry.falabella.tech" \
        "{{ onepasswordRead "op://3fvkfxjb35fzfensrsa2gsxfle/6e5oydk6aeh7zlfpm7se5gcyf4/username" "Y6TIYA2XHNHYJBR5E2BJXPSH4M" }}" \
        "{{ onepasswordRead "op://3fvkfxjb35fzfensrsa2gsxfle/bzfnqbmzljrvyruzty2sq5auw4/password" "Y6TIYA2XHNHYJBR5E2BJXPSH4M" }}" \
        "GitLab Registry (Falabella)"; then
        ((login_failures++))
    fi
{{ end -}}

    # Summary
    show_summary $login_failures \
        "All Docker registry logins completed successfully!" \
        "Docker login completed with failures"

    echo

    # Show currently logged in registries
    log_title "üìã Current Docker authentication status:"
    # Check DockerHub authentication
    check_docker_auth "dockerhub" "DockerHub"

{{ if .isWorkComputer -}}
    check_docker_auth "registry.falabella.tech" "GitLab Registry"
{{ end -}}

    show_tips \
        "Login sessions persist until Docker Desktop restart" \
        "Use 'docker logout [registry]' to sign out" \
        "Check auth status with 'docker system info'"

    # Exit with error code if any logins failed
    if [[ $login_failures -gt 0 ]]; then
        exit 1
    fi
}

# Run main function
main "$@"