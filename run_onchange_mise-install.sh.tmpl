{{ if eq .chezmoi.os "darwin" -}}

#!/bin/bash

set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Configuration
readonly MISE_CONFIG_HASH="{{ include "dot_config/mise/config.toml" | sha256sum }}"
readonly MISE_CONFIG_FILE="$HOME/.config/mise/config.toml"

# Logging functions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}" >&2
}

# Check if mise is available
check_mise_available() {
    if ! command -v mise >/dev/null 2>&1; then
        log_error "mise is not installed or not in PATH"
        log_info "Please install mise first: https://mise.jdx.dev/getting-started.html"
        return 1
    fi

    log_info "mise version: $(mise --version)"
    return 0
}

# Check if mise config exists
check_mise_config() {
    if [[ ! -f "$MISE_CONFIG_FILE" ]]; then
        log_warning "mise config file not found at $MISE_CONFIG_FILE"
        log_info "This script will install tools based on the current mise configuration"
        return 1
    fi

    log_info "Using mise config: $MISE_CONFIG_FILE"
    return 0
}

# Show what will be installed
show_installation_plan() {
    log_info "üìã Installation plan:"

    if mise ls --json >/dev/null 2>&1; then
        # Show currently installed tools
        local installed_tools
        installed_tools=$(mise ls 2>/dev/null | grep -E "^\w" | awk '{print "  üì¶ " $1 " " $2}' || echo "  No tools currently installed")
        echo -e "${BLUE}Currently installed:${NC}"
        echo "$installed_tools"
        echo
    fi

    # Show what will be installed/updated
    echo -e "${BLUE}Tools to install/update:${NC}"
    if mise outdated 2>/dev/null | grep -q .; then
        mise outdated 2>/dev/null | awk '{print "  üîÑ " $1 " " $2 " ‚Üí " $3}' || echo "  All tools are up to date"
    else
        echo "  ‚úÖ All configured tools are up to date"
    fi
    echo
}

# Install mise tools
install_mise_tools() {
    log_info "üîß Installing mise tools..."

    local start_time
    start_time=$(date +%s)

    if mise install -y; then
        local end_time
        end_time=$(date +%s)
        local duration=$((end_time - start_time))

        log_success "Tools installed successfully in ${duration}s"
        return 0
    else
        log_error "Failed to install mise tools"
        return 1
    fi
}

# Show post-installation status
show_installation_status() {
    log_info "üìä Installation status:"

    if mise ls >/dev/null 2>&1; then
        mise ls | grep -E "^\w" | awk '{print "  ‚úÖ " $1 " " $2}' || echo "  No tools installed"
    else
        log_warning "Unable to retrieve installation status"
    fi
    echo
}

# Main execution
main() {
    echo
    log_info "üõ†Ô∏è  mise Tool Installation Manager"
    log_info "Config hash: ${MISE_CONFIG_HASH:0:8}..."
    echo

    local failures=0

    # Check prerequisites
    if ! check_mise_available; then
        ((failures++))
        return 1
    fi

    # Check config (warning only, not a failure)
    check_mise_config || true

    # Show what will be installed
    show_installation_plan

    # Install tools
    if ! install_mise_tools; then
        ((failures++))
    fi

    # Show final status
    show_installation_status

    # Summary
    if [[ $failures -eq 0 ]]; then
        log_success "üéâ mise tool installation completed successfully!"
    else
        log_warning "‚ö†Ô∏è  Installation completed with $failures failure(s)"
    fi

    echo
    log_info "üí° Tips:"
    echo "  ‚Ä¢ Use 'mise ls' to see installed tools"
    echo "  ‚Ä¢ Use 'mise outdated' to check for updates"
    echo "  ‚Ä¢ Use 'mise use <tool>@<version>' to add tools"
    echo "  ‚Ä¢ Config file: $MISE_CONFIG_FILE"

    # Exit with error code if any operations failed
    if [[ $failures -gt 0 ]]; then
        exit 1
    fi
}

# Trap errors and cleanup
trap 'log_error "Script failed on line $LINENO"' ERR

# Run main function
main "$@"

{{ end -}}
